package com.opsmx.eventprocessing;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.storm.task.OutputCollector;
import org.apache.storm.task.TopologyContext;
import org.apache.storm.topology.OutputFieldsDeclarer;
import org.apache.storm.topology.base.BaseRichBolt;
import org.apache.storm.tuple.Fields;
import org.apache.storm.tuple.Tuple;
import org.apache.storm.tuple.Values;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.opsmx.model.ActivityAlert;

/**
 * Bolt for sending Alert, generated by SLA (Service Level Agreement) processing bolt.
 * <p>
 * This class will get data from the SLA processing bolt (SlaBolt)in form data required for alert to send. 
 * Object of ActivityAlert will be instantiated and send alert to REST API Server.
 * </p>
 */

public class AlertBolt extends BaseRichBolt{
	private static final long serialVersionUID = 1L;
	private OutputCollector collector;
	protected final Logger logger = LoggerFactory.getLogger(getClass());
	private ActivityAlert alert;
	
	@SuppressWarnings("rawtypes")
	public void prepare(Map stormConf, TopologyContext context, OutputCollector collector) {
		this.collector = collector;
		this.alert = new ActivityAlert();
	}
	
	@Override
	public void execute(Tuple tuple){
		String type = tuple.getStringByField("type");
		String activity = tuple.getStringByField("activity");
		String metric = tuple.getStringByField("metric");
		double value= tuple.getDoubleByField("value");
		String entityUserUID = tuple.getStringByField("entityUserUID");
		String host = tuple.getStringByField("host");
		long timestamp = tuple.getLongByField("timestamp");
		
		System.out.println("Inside Alert Bolt :"+ tuple.getStringByField("type")+" : "+tuple.getStringByField("activity")
			+" : "+tuple.getStringByField("metric")+" : "+tuple.getDoubleByField("value")+" : "+tuple.getStringByField("entityUserUID")
			+" : "+tuple.getStringByField("host")+" : "+tuple.getLongByField("timestamp"));
		
		alert.setActivity(activity);
		alert.setProviderUID(entityUserUID);
		alert.setHost(host);
		alert.setMetric(metric);
		alert.setTimestamp(timestamp);
		alert.setType(type);
		alert.setValue(value);
		
		try {
			alert.addObjectToList();
		}catch(IOException ioe){
			ioe.printStackTrace();
		}
		
		
	}
	
	@Override
	public void declareOutputFields(OutputFieldsDeclarer declarer){
		
	}

}
